generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  password       String?
  emailVerified  DateTime?
  image          String?
  role           UserRole       @default(READER)
  bio            String?
  website        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  comments       Comment[]
  journalEntries JournalEntry[]
  posts          Post[]
  sessions       Session[]

  @@index([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id              String         @id @default(cuid())
  slug            String         @unique
  title           String
  excerpt         String?
  content         String
  featuredImage   String?
  status          PostStatus     @default(DRAFT)
  visibility      PostVisibility @default(PUBLIC)
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  canonicalUrl    String?
  publishedAt     DateTime?
  scheduledAt     DateTime?
  views           Int            @default(0)
  readTime        Int?
  authorId        String
  categoryId      String?
  location        String?
  country         String?
  coordinates     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  comments        Comment[]
  images          Image[]
  author          User           @relation(fields: [authorId], references: [id])
  category        Category?      @relation(fields: [categoryId], references: [id])
  tags            Tag[]          @relation("PostToTag")

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([categoryId])
  @@map("posts")
}

model Category {
  id              String     @id @default(cuid())
  slug            String     @unique
  name            String
  description     String?
  image           String?
  parentId        String?
  order           Int        @default(0)
  isActive        Boolean    @default(true)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  parent          Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  posts           Post[]

  @@index([slug])
  @@map("categories")
}

model Tag {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("PostToTag")

  @@index([slug])
  @@map("tags")
}

model Comment {
  id           String        @id @default(cuid())
  content      String
  status       CommentStatus @default(PENDING)
  postId       String
  authorId     String?
  guestName    String?
  guestEmail   String?
  guestWebsite String?
  parentId     String?
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  author       User?         @relation(fields: [authorId], references: [id])
  parent       Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]     @relation("CommentReplies")
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([status])
  @@index([authorId])
  @@map("comments")
}

model Subscriber {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  status         SubscriberStatus @default(PENDING)
  token          String           @unique @default(cuid())
  preferences    Json?
  source         String?
  ipAddress      String?
  userAgent      String?
  confirmedAt    DateTime?
  unsubscribedAt DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([email])
  @@index([status])
  @@map("subscribers")
}

model JournalEntry {
  id               String   @id @default(cuid())
  title            String
  content          String
  mood             String?
  weather          String?
  location         String?
  authorId         String
  tags             String[]
  attachments      Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  encryptedContent Json?
  isEncrypted      Boolean  @default(false)
  author           User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@index([createdAt])
  @@map("journal_entries")
}

model Image {
  id         String          @id @default(cuid())
  url        String
  webpUrl    String?         // WebP version URL
  publicId   String?
  filename   String
  mimeType   String
  size       Int
  width      Int?
  height     Int?
  alt        String?
  caption    String?
  provider   StorageProvider @default(LOCAL)
  postId     String?
  uploadedBy String?
  folder     String?
  tags       String[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  post       Post?           @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([provider])
  @@map("images")
}

model Settings {
  id          String      @id @default(cuid())
  key         String      @unique
  value       Json
  type        SettingType @default(STRING)
  category    String      @default("general")
  description String?
  isPublic    Boolean     @default(false)
  isEditable  Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([key])
  @@index([category])
  @@map("settings")
}

model Campaign {
  id          String         @id @default(cuid())
  subject     String
  content     String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  recipients  Int            @default(0)
  opened      Int            @default(0)
  clicked     Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("campaigns")
}

model Page {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  content         String   @db.Text
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  featuredImage   String?
  isPublished     Boolean  @default(true)
  sections        Json?    // For storing structured content sections
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
  @@map("pages")
}

model Photo {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  description     String?
  location        String?
  dateTaken       DateTime?
  camera          String?
  lens            String?
  focalLength     String?
  aperture        String?
  shutterSpeed    String?
  iso             String?
  
  // Image URLs
  thumbnailUrl    String   // Small thumbnail for grid views
  webpUrl         String   // Optimized WebP version for display
  fullResUrl      String   // Full resolution image URL
  
  // Metadata
  width           Int?
  height          Int?
  fileSize        Int?     // Size in bytes
  
  // Organization
  category        String?
  tags            String[] @default([])
  featured        Boolean  @default(false)
  
  // Stats
  views           Int      @default(0)
  downloads       Int      @default(0)
  
  // Publishing
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([publishedAt])
  @@map("photos")
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  READER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
  MEMBERS_ONLY
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  TRASH
}

enum SubscriberStatus {
  PENDING
  CONFIRMED
  UNSUBSCRIBED
  BOUNCED
}

enum StorageProvider {
  LOCAL
  S3
  CLOUDINARY
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  TEXT
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}
